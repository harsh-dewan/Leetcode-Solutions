class Solution {
    
    class Pair implements Comparable<Pair> {
        int start; 
        int end;
        
        Pair(int start, int end) {
            this.start = start;
            this.end = end;
        }
        
        public int compareTo(Pair p1) {
            if( this.start < p1.start ) return -1;
            else if( this.start > p1.start ) return 1;
            else if( this.end < p1.end ) return -1;
            else return 1;
        }
    }
    
    public int countDays(int days, int[][] meetings) {
        int totalMeets = meetings.length;
        PriorityQueue<Pair> pq = new PriorityQueue<Pair>();
        for(int index = 0; index < totalMeets; index++ ) {
            Pair p1 = new Pair(meetings[index][0], meetings[index][1]);
            pq.add(p1);
        }
        int count = 0, start=1;
        Pair p2 = pq.poll();
        if( p2.start - start > 0 ) count += (p2.start-start);
        start = p2.end;
        while( pq.isEmpty() == false ) {
            p2 = pq.poll();
           // System.out.println(p2.start+" "+p2.end);
            int s1 = p2.start;
            int e1 = p2.end;
            if( e1 <= start ) continue;
            count += (s1-start-1) <= 0 ? 0 : (s1-start-1);
            start = e1;
        }
        count += (days-start) <= 0 ? 0:(days-start);
        return count;
    }
}
