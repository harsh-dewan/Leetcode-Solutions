class Solution {
    public long minOperationsToMakeMedianK(int[] nums, int k) {
        
        long minop  = 0;
        if( nums.length == 1 ) {
            if(nums[0] == k ) return 0;
            return Math.abs(k-nums[0]);
        }
        Arrays.sort(nums);
        int low = 0, high = nums.length -1;
        int mid = (low + (high-low))/2;
        int numslength = nums.length;
        if( numslength%2 == 0 ) mid = mid+1;
        if( nums[mid] == k ) return 0;
        if( nums[mid] > k ) {
            //moves towards left
            if( mid - 1 >= 0 ) {
            int dist = nums[mid] - nums[mid-1];
            int op = nums[mid] - k;
            if( op <= dist) {nums[mid] = k; minop += op; return minop;}
            while( mid >= low) {
                if( nums[mid] < k ) {}
                else {
                    minop += (nums[mid] - k );
                    nums[mid] = k;
                }
                mid -= 1;
            }
            }
            else {
                minop += (nums[mid] - k);
            }
        }
        else {
            //moves towards right
            if( mid+1 < numslength ) {
            int dist = nums[mid+1] - nums[mid];
            int op = k - nums[mid];
            if( op <= dist) {nums[mid] = k; minop += op; return minop;}
            while( mid <= high) {
                if( nums[mid] > k ) {}
                else {
                    minop += (k - nums[mid] );
                    nums[mid] = k;
                }
                mid += 1;
            }
            }
            else {
                minop += (k-nums[mid]);
            }
            
        }
        return minop;
    }
}