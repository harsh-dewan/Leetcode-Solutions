class Solution {
    ArrayList<Integer> arrList = null;
    HashMap<Integer,ArrayList<Integer>> values = null;
    int[] dp = null;

    public List<Integer> largestDivisibleSubset(int[] arr) {
        if( arr == null || arr.length == 0 ) return null;
        if( arr.length == 1 ) {
            ArrayList<Integer> a1 = new ArrayList<Integer>();
            a1.add(arr[0]);
            return a1;
        }
        Arrays.sort(arr);
        arrList = new ArrayList<Integer>();
        values = new HashMap<Integer,ArrayList<Integer>>();
        int arrLength =  arr.length;
        dp = new int[arrLength];
        dp[arrLength - 1] = 1;
        ArrayList<Integer> tempList = new ArrayList<Integer>();
        tempList.add(arr[arrLength-1]);
        values.put(arrLength-1, tempList);
        int globalMax = 1;
        for(int i = arrLength-1; i >= 0; i --) {
            dp[i] = 1;
            for(int j = i+1; j < arrLength; j++ ) {
                if( arr[j]%arr[i] == 0 ) {
                    if( dp[i] < (1+dp[j]) ) {

                        dp[i] = 1+dp[j];
                        ArrayList<Integer> newList = new ArrayList<Integer>();
                        newList.add(arr[i]);
                        newList.addAll(values.get(j));
                        ArrayList<Integer> ptrList = new ArrayList<Integer>();
                        ptrList.addAll(newList);
                        values.put(i, ptrList);
                    }
                }
            }
            if( dp[i] == 1) {
                ArrayList<Integer> iList = new ArrayList<Integer>();
                iList.add(arr[i]);
                values.put(i, iList);
                dp[i] = 1;
            }
            if( globalMax <= dp[i] ) {
                globalMax = dp[i];
                arrList = values.get(i);
            }
        }
        return arrList;
    }
}