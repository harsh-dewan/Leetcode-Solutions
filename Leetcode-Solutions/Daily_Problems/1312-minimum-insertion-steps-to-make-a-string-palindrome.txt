class Solution {

    int[][] dp = null;
    int minInsertions = 0;

    public  int computeMinInsertions(String str, int start, int end) {
        if( start > end )  return 0;
        if( dp[start][end] != -1 ) return dp[start][end];
        char sChar = str.charAt(start);
        char eChar = str.charAt(end);
        if( sChar == eChar ) {
            dp[start][end] = computeMinInsertions(str, start+1, end-1);
        }
        else {
            int option1 = computeMinInsertions(str, start, end-1);
            int option2 = computeMinInsertions(str, start+1, end);
            dp[start][end] = 1 + Integer.min(option1,option2);
        }
        minInsertions = Integer.max(minInsertions, dp[start][end]);
        return dp[start][end];
    }

    
    public int minInsertions(String str) {
        int strLength = str.length();
        minInsertions = 0;
        dp  = new int[strLength][strLength];
        for(int  i = 0; i < strLength; i++ ) {
            for(int j = 0; j < strLength; j++ ) {
                dp[i][j] = -1;
                if( i == j ) dp[i][j] = 0;
            }
        }
        computeMinInsertions(str, 0, strLength-1);
        return dp[0][strLength-1];
    }
}