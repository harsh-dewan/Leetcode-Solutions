/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<String> allPaths = null;

    public void getPath(TreeNode root, String str) {
        if( root == null ) return;
        if( root.left == null && root.right == null ) {
            if( str.length() == 0 ) str = str + String.valueOf(root.val);
            else  str =  str + "->" + String.valueOf(root.val);
            allPaths.add(str);
            return;
        }
        
        if( str.length() == 0 ) str = str + String.valueOf(root.val);
        else  str =  str + "->" + String.valueOf(root.val);
        getPath(root.left,str);
        getPath(root.right, str);
        return;
    }
    public List<String> binaryTreePaths(TreeNode root) {
        allPaths = new ArrayList<String>();
        getPath(root,"");
        return allPaths;
    }
}