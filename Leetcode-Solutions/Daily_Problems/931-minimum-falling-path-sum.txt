class Solution {
    int minSum = Integer.MAX_VALUE;
    int[][] dp = null;
    int[][] visited = null;
    int[][] givenArr = null;

    public int computeMinPathSum(int row, int col, int length) {
        if( row >= length || col < 0 || col >= length ) return Integer.MAX_VALUE;
        if( visited[row][col] == 1 ) return dp[row][col];
        int minSum = Integer.MAX_VALUE;
        int option1 = computeMinPathSum(row+1, col, length);
        int option2 = computeMinPathSum(row+1, col-1, length);
        int option3 = computeMinPathSum(row+1, col+1, length);
        if( option1 != Integer.MAX_VALUE ) minSum = Integer.min(minSum, option1);
        if( option2 != Integer.MAX_VALUE ) minSum = Integer.min(minSum, option2);
        if( option3 != Integer.MAX_VALUE ) minSum = Integer.min(minSum, option3);
        if( minSum != Integer.MAX_VALUE) dp[row][col] = minSum + givenArr[row][col];
        else dp[row][col] = givenArr[row][col];
        visited[row][col] =  1;
        return dp[row][col];
    }

    public int minFallingPathSum(int[][] matrix) {
        minSum = Integer.MAX_VALUE;
        int matrixLength = matrix.length;
        dp = new int[matrixLength][matrixLength];
        visited = new int[matrixLength][matrixLength];
        givenArr = matrix;
        for(int i = 0 ; i < matrixLength; i++ ) {
            minSum = Integer.min(minSum, computeMinPathSum(0,i,matrixLength));
        }
        return minSum;
    }
}