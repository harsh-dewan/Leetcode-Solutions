class Solution {
    HashMap<Integer,Boolean> number = null;
    HashMap<Integer,Boolean> visited = null;
    ArrayList<List<Integer>> arrList = null;

    public void generateAllPairs(int[] nums, int index, int numLength, int[] newArr) {

        //System.out.println("index: "+index);
        if( index == numLength ) {
            ArrayList<Integer> temp = new ArrayList<Integer>();
            int sum = 0;
            for(int i = 0; i < numLength; i++ ) {
                sum = sum*10 + newArr[i];
                temp.add(newArr[i]);
            }
           // System.out.println("sum: "+sum);
            if( number.getOrDefault(sum,false) == false ) {
                number.put(sum,true);
                arrList.add(temp);
            }
            return;
        }
        for(int i = 0; i < numLength; i++ ) {
            if( visited.get(i) == false ) {
                newArr[index] = nums[i];
                visited.put(i, true);
                generateAllPairs(nums, index+1, numLength,  newArr);
                visited.put(i,false);
                newArr[index] = -1;
            }
        }
        return;
    }

    public List<List<Integer>> permuteUnique(int[] nums) {
        if( nums == null || nums.length == 0 ) return null;
        int numLength = nums.length;
        arrList = new ArrayList<List<Integer>>();
        number = new HashMap<Integer,Boolean>();
        visited = new HashMap<Integer,Boolean>();
        for(int i = 0; i < numLength; i++ ) visited.put(i,false);
        int[] newArr = new int[numLength];
        generateAllPairs(nums, 0, numLength, newArr);
        return arrList;
    }
}