class Solution {

    int dp[][] = null;

    public int computeLongestCommonSeq(String str1, String str2, int s1, int s2, int e1, int e2)  {

        if( s1 >= e1 || s2 >= e2 ) return 0;
        if( dp[s1][s2] != -1 ) return dp[s1][s2];
        if( str1.charAt(s1) == str2.charAt(s2) ) {
            return dp[s1][s2] = 1 + computeLongestCommonSeq(str1, str2, s1+1, s2+1, e1, e2);
        }
        int option1 = computeLongestCommonSeq(str1, str2, s1+1, s2, e1, e2);
        int option2 = computeLongestCommonSeq(str1, str2, s1, s2+1, e1, e2);
        return dp[s1][s2] = Integer.max(option1,option2);
    }


    public int longestCommonSubsequence(String text1, String text2) {
        if( text1 == null || text2 == null ) return 0;
        int text1Length = text1.length();
        int text2Length = text2.length();
        dp = new int[text1Length][text2Length];
        for(int i = 0; i  < text1Length; i++ ) {
            for(int j = 0; j < text2Length; j++ ) {
                dp[i][j] = -1;
            }
        }
        return computeLongestCommonSeq(text1, text2, 0, 0, text1Length, text2Length);
    }
}