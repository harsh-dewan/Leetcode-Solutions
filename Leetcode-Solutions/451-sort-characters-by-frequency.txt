class Solution {

    class Pair implements Comparable<Pair> {
        char ch;
        int index;
        int count;

        public Pair(char ch, int index, int count){
            this.ch = ch;
            this.index = index;
            this.count = count;
        }

        public int getCount() {
            return this.count;
        }
        public void setCount(int count) {
            this.count = count;
        }

        public int compareTo(Pair p1) {
            if( this.count == p1.count) {
                if( p1.index < this.index )  return 1;
                else return -1; 
            }
            else if( p1.count > this.count ) return 1;
            else return -1;
        }
    }
    
    public String getFinalString(String str, int count ) {
        String newString = "";
        while(count > 0 ) {
            newString = newString + str;
            count -= 1;
        }
        return newString;
    }
    public String frequencySort(String s) {
        if( s == null || s.length() == 0 || s.length() == 1) return s;
        HashMap<String, Pair> mapCount = new HashMap<String,Pair>();
        for(int i = 0 ; i < s.length(); i++ ) {
            char ch =  s.charAt(i);
            Pair p1 = mapCount.getOrDefault(ch+"",null);
            if( p1 == null ) {
                p1 = new Pair(ch,i,1);
            }
            else {
                p1.setCount(p1.getCount()+1);
            }
            mapCount.put(ch+"",p1);
        }
        PriorityQueue<Pair> pq = new PriorityQueue<Pair>();
        for( Map.Entry<String,Pair> mapElement : mapCount.entrySet())  pq.add(mapElement.getValue());
        String finalString = "";
        while( pq.isEmpty() == false ) {
            Pair p1 = pq.poll();
        //    System.out.println("ch: "+p1.ch + " count: "+p1.count + " index: "+p1.index);
            finalString = finalString + getFinalString(p1.ch+"",p1.count);
        }
        return finalString;
    }
}