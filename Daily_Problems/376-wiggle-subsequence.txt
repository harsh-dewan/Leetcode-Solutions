class Solution {
    int maxCount = 0;
    int[][] dp = null;
    public int computeSeqLength(int[] arr, int start, int end, int reqSeq) {
        if( dp[start][reqSeq] > 0 ) return dp[start][reqSeq];
        if( start ==  end ) return dp[start][reqSeq] = 1;
        int tempCount = 0;
        if(  reqSeq == 0 ) { // prev +
            for(int i = start+1; i <= end; i++ ) {
                if( arr[start] < arr[i] ) {
                    tempCount = Integer.max(tempCount, computeSeqLength(arr, i, end, 1));
                }
            }
        }
        else {
            for(int i = start + 1; i <= end; i++ ) {
                if( arr[start] > arr[i] ) {
                    tempCount = Integer.max(tempCount, computeSeqLength(arr, i, end, 0));
                }
            }
        }
        return dp[start][reqSeq] = 1+tempCount;
    }

    public int wiggleMaxLength(int[] nums) {
        if( nums == null || nums.length == 0  ) return 0;
        int length = nums.length;
        if( length == 1 ) return length;
        maxCount = 1;
        dp = new int[length][2]; 
        //0 to search for +ve seq
        //1 to search for -ve seq
        for(int i = 0; i < length; i++ ) {
            int option1 = computeSeqLength(nums, i, length-1, 0); //to search for dp[i][0]
            int option2 = computeSeqLength(nums, i, length-1, 1); // to search for dp[i][1]
            maxCount = Integer.max(maxCount, Integer.max(option1,option2));
        }
        return maxCount; 
    }
}