class Solution {
    public int lengthOfLongestSubstring(String s) {
        if( s == null || s.length() == 0) return 0;
        int longestSeq=1;
        int strLength = s.length();
        for(int i = 0; i < strLength; i++ ) {
            int[] mapCount = new int[256];
            int low = i, high = i;
            mapCount[s.charAt(low)]=1;
            low -= 1;
            high += 1;
            while( low >= 0 && high < strLength && 
                   s.charAt(low) != s.charAt(high) && 
                   mapCount[s.charAt(low)] == 0 &&
                   mapCount[s.charAt(high)] == 0 ){
                mapCount[s.charAt(low)] = 1;
                mapCount[s.charAt(high)] = 1;
                int length = (high-low+1);
                if( length > longestSeq ) longestSeq = length;
                low -= 1;
                high += 1;
            }
            mapCount = null;
            mapCount = new int[256];
            low = i;
            high = i+1;
            while( low >= 0 && high < strLength && 
                   s.charAt(low) != s.charAt(high) && 
                   mapCount[s.charAt(low)] == 0 &&
                   mapCount[s.charAt(high)] == 0 ) {
                mapCount[s.charAt(low)] = 1;
                mapCount[s.charAt(high)] = 1;
                int length = (high-low+1);
                if( length > longestSeq ) longestSeq = length;
                low -= 1;
                high += 1;
            }
        }
        return longestSeq;
    }
}