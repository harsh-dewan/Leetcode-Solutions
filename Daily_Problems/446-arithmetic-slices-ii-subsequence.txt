class Solution {
    ArrayList<HashMap<Long,Long>> apCountList = null;
    int result = 0;

    public long computeTotalCount(int[] arr, int start, long diff) {
        if( start == arr.length-1 ) return 1;
        HashMap<Long,Long> mapCount = apCountList.get(start);
        if( mapCount.getOrDefault(diff, -1L) != -1L ) return mapCount.get(diff);
        long totalCount = 1;
        for(int i = start+1; i < arr.length; i++ ) {
            if( (long)arr[start]+(long)diff == (long)arr[i]) {
                totalCount += computeTotalCount(arr, i, diff);
            }
        }
        mapCount.put(diff, totalCount);
        apCountList.set(start,mapCount);
        return  totalCount;
    }

    public int numberOfArithmeticSlices(int[] nums) {
        apCountList = new ArrayList<HashMap<Long,Long>>();
        result = 0;
        int numsLength = nums.length;
        for(int i = 0; i < numsLength; i++ ) apCountList.add(new HashMap<Long,Long>());
        for(int i = 0; i < numsLength; i++) {
            for(int j = i+1; j < numsLength; j++) {
                long diff = (long)nums[j] - (long)nums[i];
                long totalCount = computeTotalCount(nums,j,diff);
                totalCount += 1;
                //System.out.println("totalCount: "+totalCount + " i: "+i + " j: "+j + " diff: "+diff);
                if( totalCount >= 3 ) result = (int)result+(int)1L+(int)(totalCount-3);
            }
        }
        return (int)result;
    }
}