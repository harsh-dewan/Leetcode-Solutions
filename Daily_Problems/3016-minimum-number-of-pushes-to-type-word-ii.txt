class Solution {
    class Pair implements Comparable<Pair> {
        char ch;
        int count;
        Pair(char ch, int count){
            this.ch = ch;
            this.count = count;
        }
        
        public int compareTo(Pair p1) {
            if( p1.count >= this.count ) return 1;
            else return -1;
        }
    }
    
    public int minimumPushes(String word) {
        int count = 0;
        int[] discovered = new int[26]; 
        String[] keypad = new String[8];
        int[] numKeys = new int[26];
        for(int i = 0 ; i < 8; i++) keypad[i]="";
        int totalUniq = -1, position=0;
        int wordLength = word.length();
        int[] charCount = new int[26];
        PriorityQueue<Pair> pq = new PriorityQueue<Pair>();
        for(int i = 0; i < wordLength; i++) charCount[word.charAt(i)-'a'] += 1;
        for(int i = 0; i < 26; i++ ) {
            if( charCount[i] > 0 ) pq.add(new Pair((char)(i+'a'), charCount[i]));
        }
        while(pq.size() > 0)  {
            Pair p1 = pq.poll();
            char ch = p1.ch;
            if( discovered[ch-'a'] == 0 ) {
                discovered[ch-'a'] = 1;
                totalUniq += 1;
                position = totalUniq%8;
                String temp = keypad[position];
                temp = temp + ch;
                keypad[position] = temp;
                numKeys[ch-'a'] = temp.length();
            }
            count += p1.count*numKeys[ch-'a'];
        }
        return count;
    }
}