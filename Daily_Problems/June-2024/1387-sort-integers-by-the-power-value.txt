class Solution {
    
    class Pair implements Comparable<Pair> {

        int ele;
        int steps;
        Pair(int ele, int steps) {
            this.ele = ele;
            this.steps = steps;
        }

        public int compareTo(Pair p2 ) {
            if( this.steps > p2.steps ) return 1;
            else if( this.steps < p2.steps ) return -1;
            else if(this.ele < p2.ele ) return -1;
            else return 1;
        }
        public String toString() {
            return new String(this.ele+ " "+this.steps);
        }
    }
    
    PriorityQueue<Pair> p1 = null;
    HashMap<Integer, Integer> hashMap = null;

    public int computePower(int x) {
        if( hashMap.getOrDefault(x,-1) == -1) {
            int ans =  1 + computePower(x%2 == 0 ? x/2 : 3*x+1);
            hashMap.put(x, ans);
        }
        return hashMap.get(x);
    }

    public int getKth(int lo, int hi, int k) {
        p1 = new PriorityQueue<Pair>();
        hashMap = new HashMap<Integer,Integer>();
        hashMap.put(1, 0);
        hashMap.put(2, 1);
        for(int start = lo; start <= hi; start++) {
            int power = computePower(start);
            p1.add(new Pair(start, power));
        }
        while( k > 0 ) {
            Pair pair1 = p1.poll();
            //System.out.println("ele is: "+pair1.toString());
            if( k  == 1 ) return pair1.ele;
            k -= 1;
        }
        return 0;
    }
}