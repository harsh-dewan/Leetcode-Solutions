class Solution {
    class Pair implements Comparable<Pair> {
        int key;
        int count;
        Pair(int key, int count ) {
            this.key = key;
            this.count = count;
        }
        public int compareTo(Pair p1) {
            if( this.count >= p1.count ) return 1;
            return -1;
        }
    }

    public int findLeastNumOfUniqueInts(int[] arr, int k) {
       
        Arrays.sort(arr);
        int length = arr.length;
        PriorityQueue<Pair> pq = new PriorityQueue<Pair>();
        int prev = arr[0];
        int prevCount = 1;
        for(int i = 1; i < length; i++ ) {
            if( arr[i] == prev) {
                prevCount += 1;
                continue;
            }
            else {
                pq.add(new Pair(prev,prevCount));
                prev = arr[i];
                prevCount = 1;
            }
        }
        pq.add(new Pair(prev,prevCount));
        if( k == 0 ) return pq.size();
        int considered = 0;
        while( pq.size() > 0 ) {
            Pair p1 = pq.poll();
            if( considered + p1.count < k ) {
                considered += p1.count;
            }
            else if( considered + p1.count == k ) {
                return pq.size();
            }
            else {
                int c = p1.count;
                while( considered != k ) {
                    considered += 1;
                    c -= 1;
                }
                return pq.size()+1;
            }
        }
        return pq.size();
    }
}